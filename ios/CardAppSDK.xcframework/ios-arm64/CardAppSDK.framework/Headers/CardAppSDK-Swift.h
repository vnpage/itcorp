#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef CARDAPPSDK_SWIFT_H
#define CARDAPPSDK_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import CoreFoundation;
@import CoreGraphics;
@import Foundation;
@import ObjectiveC;
@import QuartzCore;
@import UIKit;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="CardAppSDK",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

@class UIView;
/// Can be <code>UIView</code> or <code>UIBarButtonItem</code>.
SWIFT_PROTOCOL("_TtP10CardAppSDK10AnchorView_")
@protocol AnchorView
@property (nonatomic, readonly, strong) UIView * _Nonnull plainView;
@end

@class NSCoder;
@class UITouch;
@class UIEvent;
/// Lottie comes prepacked with a two Animated Controls, <code>AnimatedSwitch</code> and
/// <code>AnimatedButton</code>. Both of these controls are built on top of <code>AnimatedControl</code>
/// <code>AnimatedControl</code> is a subclass of <code>UIControl</code> that provides an interactive
/// mechanism for controlling the visual state of an animation in response to
/// user actions.
/// The <code>AnimatedControl</code> will show and hide layers depending on the current
/// <code>UIControl.State</code> of the control.
/// Users of <code>AnimationControl</code> can set a Layer Name for each <code>UIControl.State</code>.
/// When the state is change the <code>AnimationControl</code> will change the visibility
/// of its layers.
/// NOTE: Do not initialize directly. This is intended to be subclassed.
SWIFT_CLASS("_TtC10CardAppSDK15AnimatedControl")
@interface AnimatedControl : UIControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, getter=isEnabled) BOOL enabled;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (BOOL)continueTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
- (void)cancelTrackingWithEvent:(UIEvent * _Nullable)event;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
@end

/// An interactive button that plays an animation when pressed.
SWIFT_CLASS("_TtC10CardAppSDK14AnimatedButton")
@interface AnimatedButton : AnimatedControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (BOOL)beginTrackingWithTouch:(UITouch * _Nonnull)touch withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
@end

/// An interactive switch with an ‘On’ and ‘Off’ state. When the user taps on the
/// switch the state is toggled and the appropriate animation is played.
/// Both the ‘On’ and ‘Off’ have an animation play range associated with their state.
SWIFT_CLASS("_TtC10CardAppSDK14AnimatedSwitch")
@interface AnimatedSwitch : AnimatedControl
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)endTrackingWithTouch:(UITouch * _Nullable)touch withEvent:(UIEvent * _Nullable)event;
@property (nonatomic) UIAccessibilityTraits accessibilityTraits;
@end

/// A view that can be added to a keypath of an AnimationView
SWIFT_CLASS("_TtC10CardAppSDK16AnimationSubview")
@interface AnimationSubview : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// The base view for <code>AnimationView</code> on iOS, tvOS, watchOS, and macCatalyst.
/// Enables the <code>AnimationView</code> implementation to be shared across platforms.
SWIFT_CLASS("_TtC10CardAppSDK17AnimationViewBase")
@interface AnimationViewBase : UIView
@property (nonatomic) UIViewContentMode contentMode;
- (void)didMoveToWindow;
- (void)layoutSubviews;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

IB_DESIGNABLE
SWIFT_CLASS("_TtC10CardAppSDK13AnimationView")
@interface AnimationView : AnimationViewBase
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

SWIFT_CLASS("_TtC10CardAppSDK6Button")
@interface Button : UIButton
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@class CALayer;
@class UIColor;
@class NSString;
@class UIFont;
@class NSAttributedString;
IB_DESIGNABLE
SWIFT_CLASS("_TtC10CardAppSDK11CATextField")
@interface CATextField : UITextField
- (id _Nullable)awakeAfterUsingCoder:(NSCoder * _Nonnull)aDecoder SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) CALayer * _Nonnull dtLayer;
@property (nonatomic, strong) UIColor * _Nonnull floatPlaceholderColor;
@property (nonatomic, strong) UIColor * _Nonnull floatPlaceholderActiveColor;
@property (nonatomic) double floatingLabelShowAnimationDuration;
@property (nonatomic) CGFloat borderWidthTextField;
@property (nonatomic, copy) NSString * _Nonnull errorMessage;
@property (nonatomic) UITextContentType _Nullable contentType;
@property (nonatomic) BOOL animateFloatPlaceholder;
@property (nonatomic) BOOL hideErrorWhenEditing;
@property (nonatomic, strong) UIFont * _Nonnull errorFont;
@property (nonatomic, strong) UIColor * _Nonnull errorTextColor;
@property (nonatomic, strong) UIFont * _Nonnull floatPlaceholderFont;
@property (nonatomic) CGFloat paddingYFloatLabel;
@property (nonatomic) CGFloat paddingYErrorLabel;
@property (nonatomic, strong) UIColor * _Nonnull borderColorTextField;
@property (nonatomic) BOOL canShowBorder;
@property (nonatomic, strong) UIColor * _Nullable placeholderColor;
@property (nonatomic) UITextBorderStyle borderStyle;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, copy) NSString * _Nullable text;
@property (nonatomic, copy) NSString * _Nullable placeholder;
@property (nonatomic, strong) NSAttributedString * _Nullable attributedPlaceholder;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)setTest;
- (void)showErrorWithMessage:(NSString * _Nullable)message;
- (void)hideError;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)leftViewRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)rightViewRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)clearButtonRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (void)layoutSubviews;
@end

@interface CATextField (SWIFT_EXTENSION(CardAppSDK)) <UITextFieldDelegate>
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
@end

typedef SWIFT_ENUM(NSInteger, CardAppDocumentSubType, open) {
  CardAppDocumentSubTypeDkkd = 1,
  CardAppDocumentSubTypeCccdDaiDien = 2,
  CardAppDocumentSubTypeGcnMST = 3,
  CardAppDocumentSubTypeGcnKDCDK = 4,
  CardAppDocumentSubTypeBctc = 5,
  CardAppDocumentSubTypeTkVAT = 6,
  CardAppDocumentSubTypeTkTHUE = 7,
  CardAppDocumentSubTypeHaddkd = 8,
};

typedef SWIFT_ENUM(NSInteger, CardAppDocumentType, open) {
  CardAppDocumentTypeHspl = 1,
  CardAppDocumentTypeHstc = 2,
  CardAppDocumentTypeHsha = 3,
};

@class NSBundle;
/// An Objective-C compatible wrapper around Lottie’s Animation class.
/// Use in tandem with CompatibleAnimationView when using Lottie in Objective-C
SWIFT_CLASS("_TtC10CardAppSDK19CompatibleAnimation")
@interface CompatibleAnimation : NSObject
- (nonnull instancetype)initWithName:(NSString * _Nonnull)name bundle:(NSBundle * _Nonnull)bundle OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An Objective-C compatible wrapper around Lottie’s AnimationKeypath
SWIFT_CLASS("_TtC10CardAppSDK26CompatibleAnimationKeypath")
@interface CompatibleAnimationKeypath : NSObject
/// Creates a keypath from a dot separated string. The string is separated by “.”
- (nonnull instancetype)initWithKeypath:(NSString * _Nonnull)keypath OBJC_DESIGNATED_INITIALIZER;
/// Creates a keypath from a list of strings.
- (nonnull instancetype)initWithKeys:(NSArray<NSString *> * _Nonnull)keys OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// An Objective-C compatible wrapper around Lottie’s AnimationView.
SWIFT_CLASS("_TtC10CardAppSDK23CompatibleAnimationView")
@interface CompatibleAnimationView : UIView
- (nonnull instancetype)initWithCompatibleAnimation:(CompatibleAnimation * _Nonnull)compatibleAnimation OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)_ SWIFT_UNAVAILABLE;
@property (nonatomic, strong) CompatibleAnimation * _Nullable compatibleAnimation;
@property (nonatomic) CGFloat loopAnimationCount;
@property (nonatomic) UIViewContentMode contentMode;
@property (nonatomic) BOOL shouldRasterizeWhenIdle;
@property (nonatomic) CGFloat currentProgress;
@property (nonatomic) NSTimeInterval currentTime;
@property (nonatomic) CGFloat currentFrame;
@property (nonatomic, readonly) CGFloat realtimeAnimationFrame;
@property (nonatomic, readonly) CGFloat realtimeAnimationProgress;
@property (nonatomic) CGFloat animationSpeed;
@property (nonatomic) BOOL respectAnimationFrameRate;
@property (nonatomic, readonly) BOOL isAnimationPlaying;
- (void)play;
- (void)playWithCompletion:(void (^ _Nullable)(BOOL))completion;
- (void)playFromProgress:(CGFloat)fromProgress toProgress:(CGFloat)toProgress completion:(void (^ _Nullable)(BOOL))completion;
- (void)playFromFrame:(CGFloat)fromFrame toFrame:(CGFloat)toFrame completion:(void (^ _Nullable)(BOOL))completion;
- (void)playFromMarker:(NSString * _Nonnull)fromMarker toMarker:(NSString * _Nonnull)toMarker completion:(void (^ _Nullable)(BOOL))completion;
- (void)playWithMarker:(NSString * _Nonnull)marker completion:(void (^ _Nullable)(BOOL))completion;
- (void)stop;
- (void)pause;
- (void)reloadImages;
- (void)forceDisplayUpdate;
- (id _Nullable)getValueFor:(CompatibleAnimationKeypath * _Nonnull)keypath atFrame:(CGFloat)atFrame SWIFT_WARN_UNUSED_RESULT;
- (void)logHierarchyKeypaths;
- (void)setColorValue:(UIColor * _Nonnull)color forKeypath:(CompatibleAnimationKeypath * _Nonnull)keypath;
- (UIColor * _Nullable)getColorValueFor:(CompatibleAnimationKeypath * _Nonnull)keypath atFrame:(CGFloat)atFrame SWIFT_WARN_UNUSED_RESULT;
- (void)addSubview:(AnimationSubview * _Nonnull)subview forLayerAt:(CompatibleAnimationKeypath * _Nonnull)keypath;
- (CGRect)convertWithRect:(CGRect)rect toLayerAt:(CompatibleAnimationKeypath * _Nullable)keypath SWIFT_WARN_UNUSED_RESULT;
- (CGPoint)convertWithPoint:(CGPoint)point toLayerAt:(CompatibleAnimationKeypath * _Nullable)keypath SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)progressTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)frameTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
- (CGFloat)durationFrameTimeForMarker:(NSString * _Nonnull)named SWIFT_WARN_UNUSED_RESULT;
@end

typedef SWIFT_ENUM(NSInteger, DisplayType, open) {
  DisplayTypeCircular = 0,
  DisplayTypeRoundedCorner = 1,
  DisplayTypeSquare = 2,
  DisplayTypeDiamond = 3,
  DisplayTypeUnderlinedBottom = 4,
};

/// A Material Design drop down in replacement for <code>UIPickerView</code>.
SWIFT_CLASS("_TtC10CardAppSDK8DropDown")
@interface DropDown : UIView
@property (nonatomic) CGFloat cellHeight;
@property (nonatomic, strong) UIColor * _Nullable backgroundColor;
/// The background color of the selected cell in the drop down.
/// Changing the background color automatically reloads the drop down.
@property (nonatomic, strong) UIColor * _Nonnull selectionBackgroundColor;
/// The separator color between cells.
/// Changing the separator color automatically reloads the drop down.
@property (nonatomic, strong) UIColor * _Nonnull separatorColor;
/// The corner radius of DropDown.
/// Changing the corner radius automatically reloads the drop down.
@property (nonatomic) CGFloat cornerRadiusDropdown;
/// Alias method for <code>cornerRadius</code> variable to avoid ambiguity.
- (void)setupCornerRadius:(CGFloat)radius;
/// The masked corners of DropDown.
/// Changing the masked corners automatically reloads the drop down.
- (void)setupMaskedCorners:(CACornerMask)cornerMask SWIFT_AVAILABILITY(ios,introduced=11.0);
/// The color of the shadow.
/// Changing the shadow color automatically reloads the drop down.
@property (nonatomic, strong) UIColor * _Nonnull shadowColorDropdown;
/// The offset of the shadow.
/// Changing the shadow color automatically reloads the drop down.
@property (nonatomic) CGSize shadowOffsetDropdown;
/// The opacity of the shadow.
/// Changing the shadow opacity automatically reloads the drop down.
@property (nonatomic) float shadowOpacityDropdown;
/// The radius of the shadow.
/// Changing the shadow radius automatically reloads the drop down.
@property (nonatomic) CGFloat shadowRadiusDropdown;
/// The duration of the show/hide animation.
@property (nonatomic) double animationduration;
/// The color of the text for each cells of the drop down.
/// Changing the text color automatically reloads the drop down.
@property (nonatomic, strong) UIColor * _Nonnull textColor;
/// The color of the text for selected cells of the drop down.
/// Changing the text color automatically reloads the drop down.
@property (nonatomic, strong) UIColor * _Nonnull selectedTextColor;
/// The font of the text for each cells of the drop down.
/// Changing the text font automatically reloads the drop down.
@property (nonatomic, strong) UIFont * _Nonnull textFont;
/// Creates a new instance of a drop down.
/// Don’t forget to setup the <code>dataSource</code>,
/// the <code>anchorView</code> and the <code>selectionAction</code>
/// at least before calling <code>show()</code>.
- (nonnull instancetype)init;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@interface DropDown (SWIFT_EXTENSION(CardAppSDK))
- (UIView * _Nullable)hitTest:(CGPoint)point withEvent:(UIEvent * _Nullable)event SWIFT_WARN_UNUSED_RESULT;
@end

@interface DropDown (SWIFT_EXTENSION(CardAppSDK))
/// Starts listening to keyboard events.
/// Allows the drop down to display correctly when keyboard is showed.
+ (void)startListeningToKeyboard;
@end

@class UITableView;
@class NSIndexPath;
@class UITableViewCell;
@interface DropDown (SWIFT_EXTENSION(CardAppSDK)) <UITableViewDataSource, UITableViewDelegate>
- (NSInteger)tableView:(UITableView * _Nonnull)tableView numberOfRowsInSection:(NSInteger)section SWIFT_WARN_UNUSED_RESULT;
- (UITableViewCell * _Nonnull)tableView:(UITableView * _Nonnull)tableView cellForRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath SWIFT_WARN_UNUSED_RESULT;
- (void)tableView:(UITableView * _Nonnull)tableView willDisplayCell:(UITableViewCell * _Nonnull)cell forRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
- (void)tableView:(UITableView * _Nonnull)tableView didSelectRowAtIndexPath:(NSIndexPath * _Nonnull)indexPath;
@end

@class NSDictionary;
@interface DropDown (SWIFT_EXTENSION(CardAppSDK))
/// An Objective-C alias for the show() method which converts the returned tuple into an NSDictionary.
///
/// returns:
/// An NSDictionary with a value for the “canBeDisplayed” Bool, and possibly for the “offScreenHeight” Optional(CGFloat).
- (NSDictionary * _Nonnull)show SWIFT_WARN_UNUSED_RESULT;
- (BOOL)accessibilityPerformEscape SWIFT_WARN_UNUSED_RESULT;
@end

@interface DropDown (SWIFT_EXTENSION(CardAppSDK))
- (void)updateConstraints;
- (void)layoutSubviews;
@end

@interface DropDown (SWIFT_EXTENSION(CardAppSDK))
- (void)selectRow:(NSInteger)index scrollPosition:(enum UITableViewScrollPosition)scrollPosition;
- (void)clearSelection;
- (void)deselectRow:(NSInteger)index;
@property (nonatomic, readonly, strong) NSIndexPath * _Nullable indexPathForSelectedRow;
@end

@class UILabel;
SWIFT_CLASS("_TtC10CardAppSDK12DropDownCell")
@interface DropDownCell : UITableViewCell
@property (nonatomic, weak) IBOutlet UILabel * _Null_unspecified optionLabel;
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER SWIFT_AVAILABILITY(ios,introduced=3.0);
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@interface DropDownCell (SWIFT_EXTENSION(CardAppSDK))
- (void)awakeFromNib;
@property (nonatomic, getter=isSelected) BOOL selected;
@property (nonatomic, getter=isHighlighted) BOOL highlighted;
- (void)setHighlighted:(BOOL)highlighted animated:(BOOL)animated;
- (void)setSelected:(BOOL)selected animated:(BOOL)animated;
@end

@class UITraitCollection;
IB_DESIGNABLE
SWIFT_CLASS("_TtC10CardAppSDK8Gradient")
@interface Gradient : UIView
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly) Class _Nonnull layerClass;)
+ (Class _Nonnull)layerClass SWIFT_WARN_UNUSED_RESULT;
- (void)traitCollectionDidChange:(UITraitCollection * _Nullable)previousTraitCollection;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

IB_DESIGNABLE
SWIFT_CLASS("_TtC10CardAppSDK13GradientLabel")
@interface GradientLabel : Gradient
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

/// <code>IQAutoToolbarBySubviews</code>
/// Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// <code>IQAutoToolbarByTag</code>
/// Creates Toolbar according to tag property of TextField’s.
/// <code>IQAutoToolbarByPosition</code>
/// Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
typedef SWIFT_ENUM(NSInteger, IQAutoToolbarManageBehaviour, open) {
  IQAutoToolbarManageBehaviourBySubviews = 0,
  IQAutoToolbarManageBehaviourByTag = 1,
  IQAutoToolbarManageBehaviourByPosition = 2,
};

@class IQInvocation;
SWIFT_CLASS("_TtC10CardAppSDK15IQBarButtonItem")
@interface IQBarButtonItem : UIBarButtonItem
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, strong) UIColor * _Nullable tintColor;
/// Additional target & action to do get callback action. Note that setting custom target & selector doesn’t affect native functionality, this is just an additional target to get a callback.
/// @param target Target object.
/// @param action Target Selector.
- (void)setTarget:(id _Nullable)target action:(SEL _Nullable)action;
/// Customized Invocation to be called when button is pressed. invocation is internally created using setTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
@end

@class UIImage;
/// IQBarButtonItemConfiguration for creating toolbar with bar button items
SWIFT_CLASS("_TtC10CardAppSDK28IQBarButtonItemConfiguration")
@interface IQBarButtonItemConfiguration : NSObject
- (nonnull instancetype)initWithBarButtonSystemItem:(UIBarButtonSystemItem)barButtonSystemItem action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithImage:(UIImage * _Nonnull)image action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithTitle:(NSString * _Nonnull)title action:(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
@property (nonatomic, readonly, strong) UIImage * _Nullable image;
@property (nonatomic, readonly, copy) NSString * _Nullable title;
@property (nonatomic, readonly) SEL _Nullable action;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// <code>IQEnableModeDefault</code>
/// Pick default settings.
/// <code>IQEnableModeEnabled</code>
/// setting is enabled.
/// <code>IQEnableModeDisabled</code>
/// setting is disabled.
typedef SWIFT_ENUM(NSInteger, IQEnableMode, open) {
  IQEnableModeDefault = 0,
  IQEnableModeEnabled = 1,
  IQEnableModeDisabled = 2,
};

SWIFT_CLASS("_TtC10CardAppSDK12IQInvocation")
@interface IQInvocation : NSObject
@property (nonatomic, weak) id _Nullable target;
@property (nonatomic) SEL _Nonnull action;
- (nonnull instancetype)init:(id _Nonnull)target :(SEL _Nonnull)action OBJC_DESIGNATED_INITIALIZER;
- (void)invokeFrom:(id _Nonnull)from;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

enum IQPreviousNextDisplayMode : NSInteger;
@class UITapGestureRecognizer;
@class UIGestureRecognizer;
@class UIViewController;
/// Codeless drop-in universal library allows to prevent issues of keyboard sliding up and cover UITextField/UITextView. Neither need to write any code nor any setup required and much more. A generic version of KeyboardManagement. https://developer.apple.com/library/ios/documentation/StringsTextFonts/Conceptual/TextAndWebiPhoneOS/KeyboardManagement/KeyboardManagement.html
SWIFT_CLASS("_TtC10CardAppSDK17IQKeyboardManager")
@interface IQKeyboardManager : NSObject <UIGestureRecognizerDelegate>
/// Enable/disable managing distance between keyboard and textField. Default is YES(Enabled when class loads in <code>+(void)load</code> method).
@property (nonatomic) BOOL enable;
/// To set keyboard distance from textField. can’t be less than zero. Default is 10.0.
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// Boolean to know if keyboard is showing.
@property (nonatomic, readonly) BOOL keyboardShowing;
/// moved distance to the top used to maintain distance between keyboard and textField. Most of the time this will be a positive value.
@property (nonatomic, readonly) CGFloat movedDistance;
/// Returns the default singleton instance.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) IQKeyboardManager * _Nonnull shared;)
+ (IQKeyboardManager * _Nonnull)shared SWIFT_WARN_UNUSED_RESULT;
/// Automatic add the IQToolbar functionality. Default is YES.
@property (nonatomic) BOOL enableAutoToolbar;
/// /**
/// IQAutoToolbarBySubviews:   Creates Toolbar according to subview’s hirarchy of Textfield’s in view.
/// IQAutoToolbarByTag:        Creates Toolbar according to tag property of TextField’s.
/// IQAutoToolbarByPosition:   Creates Toolbar according to the y,x position of textField in it’s superview coordinate.
/// Default is IQAutoToolbarBySubviews.
/// */
/// AutoToolbar managing behaviour. Default is IQAutoToolbarBySubviews.
@property (nonatomic) enum IQAutoToolbarManageBehaviour toolbarManageBehaviour;
/// If YES, then uses textField’s tintColor property for IQToolbar, otherwise tint color is default. Default is NO.
@property (nonatomic) BOOL shouldToolbarUsesTextFieldTintColor;
/// This is used for toolbar.tintColor when textfield.keyboardAppearance is UIKeyboardAppearanceDefault. If shouldToolbarUsesTextFieldTintColor is YES then this property is ignored. Default is nil and uses black color.
@property (nonatomic, strong) UIColor * _Nullable toolbarTintColor;
/// This is used for toolbar.barTintColor. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable toolbarBarTintColor;
/// IQPreviousNextDisplayModeDefault:      Show NextPrevious when there are more than 1 textField otherwise hide.
/// IQPreviousNextDisplayModeAlwaysHide:   Do not show NextPrevious buttons in any case.
/// IQPreviousNextDisplayModeAlwaysShow:   Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
@property (nonatomic) enum IQPreviousNextDisplayMode previousNextDisplayMode;
/// Toolbar previous/next/done button icon, If nothing is provided then check toolbarDoneBarButtonItemText to draw done button.
@property (nonatomic, strong) UIImage * _Nullable toolbarPreviousBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarNextBarButtonItemImage;
@property (nonatomic, strong) UIImage * _Nullable toolbarDoneBarButtonItemImage;
/// Toolbar previous/next/done button text, If nothing is provided then system default ‘UIBarButtonSystemItemDone’ will be used.
@property (nonatomic, copy) NSString * _Nullable toolbarPreviousBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarNextBarButtonItemText;
@property (nonatomic, copy) NSString * _Nullable toolbarDoneBarButtonItemText;
/// If YES, then it add the textField’s placeholder text on IQToolbar. Default is YES.
@property (nonatomic) BOOL shouldShowToolbarPlaceholder;
/// Placeholder Font. Default is nil.
@property (nonatomic, strong) UIFont * _Nullable placeholderFont;
/// Placeholder Color. Default is nil. Which means lightGray
@property (nonatomic, strong) UIColor * _Nullable placeholderColor;
/// Placeholder Button Color when it’s treated as button. Default is nil.
@property (nonatomic, strong) UIColor * _Nullable placeholderButtonColor;
/// Override the keyboardAppearance for all textField/textView. Default is NO.
@property (nonatomic) BOOL overrideKeyboardAppearance;
/// If overrideKeyboardAppearance is YES, then all the textField keyboardAppearance is set using this property.
@property (nonatomic) UIKeyboardAppearance keyboardAppearance;
/// Resigns Keyboard on touching outside of UITextField/View. Default is NO.
@property (nonatomic) BOOL shouldResignOnTouchOutside;
/// TapGesture to resign keyboard on view’s touch. It’s a readonly property and exposed only for adding/removing dependencies if your added gesture does have collision with this one
@property (nonatomic, strong) UITapGestureRecognizer * _Nonnull resignFirstResponderGesture;
/// Resigns currently first responder field.
- (BOOL)resignFirstResponder;
/// Returns YES if can navigate to previous responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoPrevious;
/// Returns YES if can navigate to next responder textField/textView, otherwise NO.
@property (nonatomic, readonly) BOOL canGoNext;
/// Navigate to previous responder textField/textView.
- (BOOL)goPrevious;
/// Navigate to next responder textField/textView.
- (BOOL)goNext;
/// Note: returning YES is guaranteed to allow simultaneous recognition. returning NO is not guaranteed to prevent simultaneous recognition, as the other gesture’s delegate may return YES.
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldRecognizeSimultaneouslyWithGestureRecognizer:(UIGestureRecognizer * _Nonnull)otherGestureRecognizer SWIFT_WARN_UNUSED_RESULT;
/// To not detect touch events in a subclass of UIControl, these may have added their own selector for specific work
- (BOOL)gestureRecognizer:(UIGestureRecognizer * _Nonnull)gestureRecognizer shouldReceiveTouch:(UITouch * _Nonnull)touch SWIFT_WARN_UNUSED_RESULT;
/// If YES, then it plays inputClick sound on next/previous/done click.
@property (nonatomic) BOOL shouldPlayInputClicks;
/// If YES, then calls ‘setNeedsLayout’ and ‘layoutIfNeeded’ on any frame update of to viewController’s view.
@property (nonatomic) BOOL layoutIfNeededOnUpdate;
/// Disable distance handling within the scope of disabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledDistanceHandlingClasses;
/// Enable distance handling within the scope of enabled distance handling viewControllers classes. Within this scope, ‘enabled’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledDistanceHandlingClasses list, then enabledDistanceHandlingClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledDistanceHandlingClasses;
/// Disable automatic toolbar creation within the scope of disabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledToolbarClasses;
/// Enable automatic toolbar creation within the scope of enabled toolbar viewControllers classes. Within this scope, ‘enableAutoToolbar’ property is ignored. Class should be kind of UIViewController. If same Class is added in disabledToolbarClasses list, then enabledToolbarClasses will be ignore.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledToolbarClasses;
/// Allowed subclasses of UIView to add all inner textField, this will allow to navigate between textField contains in different superview. Class should be kind of UIView.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull toolbarPreviousNextAllowedClasses;
/// Disabled classes to ignore ‘shouldResignOnTouchOutside’ property, Class should be kind of UIViewController.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull disabledTouchResignedClasses;
/// Enabled classes to forcefully enable ‘shouldResignOnTouchOutsite’ property. Class should be kind of UIViewController. If same Class is added in disabledTouchResignedClasses list, then enabledTouchResignedClasses will be ignored.
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIViewController)> * _Nonnull enabledTouchResignedClasses;
/// if shouldResignOnTouchOutside is enabled then you can customise the behaviour to not recognise gesture touches on some specific view subclasses. Class should be kind of UIView. Default is [UIControl, UINavigationBar]
@property (nonatomic, copy) NSArray<SWIFT_METATYPE(UIView)> * _Nonnull touchResignedGestureIgnoreClasses;
/// Add/Remove customised Notification for third party customised TextField/TextView. Please be aware that the Notification object must be idential to UITextField/UITextView Notification objects and customised TextField/TextView support must be idential to UITextField/UITextView.
/// @param didBeginEditingNotificationName This should be identical to UITextViewTextDidBeginEditingNotification
/// @param didEndEditingNotificationName This should be identical to UITextViewTextDidEndEditingNotification
- (void)registerTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
- (void)unregisterTextFieldViewClass:(SWIFT_METATYPE(UIView) _Nonnull)aClass didBeginEditingNotificationName:(NSString * _Nonnull)didBeginEditingNotificationName didEndEditingNotificationName:(NSString * _Nonnull)didEndEditingNotificationName;
/// <hr/>
/// <h2>MARK: Initialization/Deinitialization</h2>
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
/// <hr/>
/// <h2>MARK: Public Methods</h2>
- (void)reloadLayoutIfNeeded;
/// reloadInputViews to reload toolbar buttons enable/disable state on the fly Enhancement ID #434.
- (void)reloadInputViews;
/// <hr/>
/// <h2>MARK: Debugging & Developer options</h2>
@property (nonatomic) BOOL enableDebugging;
/// @warning Use below methods to completely enable/disable notifications registered by library internally. Please keep in mind that library is totally dependent on NSNotification of UITextField, UITextField, Keyboard etc. If you do unregisterAllNotifications then library will not work at all. You should only use below methods if you want to completedly disable all library functions. You should use below methods at your own risk.
- (void)registerAllNotifications;
- (void)unregisterAllNotifications;
@end

@class UITextView;
@class NSURL;
@class NSTextAttachment;
/// Manages the return key to work like next/done in a view hierarchy.
SWIFT_CLASS("_TtC10CardAppSDK26IQKeyboardReturnKeyHandler")
@interface IQKeyboardReturnKeyHandler : NSObject <UITextFieldDelegate, UITextViewDelegate>
/// Delegate of textField/textView.
@property (nonatomic, weak) id <UITextFieldDelegate, UITextViewDelegate> _Nullable delegate;
/// Set the last textfield return key type. Default is UIReturnKeyDefault.
@property (nonatomic) UIReturnKeyType lastTextFieldReturnKeyType;
/// <hr/>
/// <h2>MARK: Initialization/Deinitialization</h2>
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
/// Add all the textFields available in UIViewController’s view.
- (nonnull instancetype)initWithController:(UIViewController * _Nonnull)controller OBJC_DESIGNATED_INITIALIZER;
/// Should pass UITextField/UITextView intance. Assign textFieldView delegate to self, change it’s returnKeyType.
/// @param view UITextField/UITextView object to register.
- (void)addTextFieldView:(UIView * _Nonnull)view;
/// Should pass UITextField/UITextView intance. Restore it’s textFieldView delegate and it’s returnKeyType.
/// @param view UITextField/UITextView object to unregister.
- (void)removeTextFieldView:(UIView * _Nonnull)view;
/// Add all the UITextField/UITextView responderView’s.
/// @param view UIView object to register all it’s responder subviews.
- (void)addResponderFromView:(UIView * _Nonnull)view;
/// Remove all the UITextField/UITextView responderView’s.
/// @param view UIView object to unregister all it’s responder subviews.
- (void)removeResponderFromView:(UIView * _Nonnull)view;
/// <hr/>
/// <h2>MARK: UITextField/UITextView delegates</h2>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldEndEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (void)textFieldDidBeginEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField;
- (void)textFieldDidEndEditing:(UITextField * _Nonnull)textField reason:(UITextFieldDidEndEditingReason)reason SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldClear:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textFieldShouldReturn:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldBeginEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textViewShouldEndEditing:(UITextView * _Nonnull)textView SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidBeginEditing:(UITextView * _Nonnull)textView;
- (void)textViewDidEndEditing:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)textView shouldChangeTextInRange:(NSRange)range replacementText:(NSString * _Nonnull)text SWIFT_WARN_UNUSED_RESULT;
- (void)textViewDidChange:(UITextView * _Nonnull)textView;
- (void)textViewDidChangeSelection:(UITextView * _Nonnull)textView;
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange interaction:(UITextItemInteraction)interaction SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,introduced=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithURL:(NSURL * _Nonnull)URL inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
- (BOOL)textView:(UITextView * _Nonnull)aTextView shouldInteractWithTextAttachment:(NSTextAttachment * _Nonnull)textAttachment inRange:(NSRange)characterRange SWIFT_WARN_UNUSED_RESULT SWIFT_AVAILABILITY(ios,deprecated=10.0);
@end

/// <code>IQPreviousNextDisplayModeDefault</code>
/// Show NextPrevious when there are more than 1 textField otherwise hide.
/// <code>IQPreviousNextDisplayModeAlwaysHide</code>
/// Do not show NextPrevious buttons in any case.
/// <code>IQPreviousNextDisplayModeAlwaysShow</code>
/// Always show nextPrevious buttons, if there are more than 1 textField then both buttons will be visible but will be shown as disabled.
typedef SWIFT_ENUM(NSInteger, IQPreviousNextDisplayMode, open) {
  IQPreviousNextDisplayModeDefault = 0,
  IQPreviousNextDisplayModeAlwaysHide = 1,
  IQPreviousNextDisplayModeAlwaysShow = 2,
};

SWIFT_CLASS("_TtC10CardAppSDK18IQPreviousNextView")
@interface IQPreviousNextView : UIView
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@class NSTextContainer;
/// @abstract UITextView with placeholder support
SWIFT_CLASS("_TtC10CardAppSDK10IQTextView")
@interface IQTextView : UITextView
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (nonnull instancetype)initWithFrame:(CGRect)frame textContainer:(NSTextContainer * _Nullable)textContainer OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
/// @abstract To set textView’s placeholder text color.
@property (nonatomic, strong) IBInspectable UIColor * _Nullable placeholderTextColor;
/// @abstract To set textView’s placeholder text. Default is nil.
@property (nonatomic, copy) IBInspectable NSString * _Nullable placeholder;
- (void)layoutSubviews;
@property (nonatomic, copy) NSString * _Null_unspecified text;
@property (nonatomic, strong) NSAttributedString * _Null_unspecified attributedText;
@property (nonatomic, strong) UIFont * _Nullable font;
@property (nonatomic) NSTextAlignment textAlignment;
@property (nonatomic, strong) id <UITextViewDelegate> _Nullable delegate;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
@end

SWIFT_CLASS("_TtC10CardAppSDK20IQTitleBarButtonItem")
@interface IQTitleBarButtonItem : IQBarButtonItem
@property (nonatomic, strong) UIFont * _Nullable titleFont;
@property (nonatomic, copy) NSString * _Nullable title;
/// titleColor to be used for displaying button text when displaying title (disabled state).
@property (nonatomic, strong) UIColor * _Nullable titleColor;
/// selectableTitleColor to be used for displaying button text when button is enabled.
@property (nonatomic, strong) UIColor * _Nullable selectableTitleColor;
/// Customized Invocation to be called on title button action. titleInvocation is internally created using setTitleTarget:action: method.
@property (nonatomic, strong) IQInvocation * _Nullable invocation;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
- (nonnull instancetype)initWithTitle:(NSString * _Nullable)title;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

/// @abstract   IQToolbar for IQKeyboardManager.
SWIFT_CLASS("_TtC10CardAppSDK9IQToolbar")
@interface IQToolbar : UIToolbar <UIInputViewAudioFeedback>
@property (nonatomic, strong) IQBarButtonItem * _Nonnull previousBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull nextBarButton;
@property (nonatomic, strong) IQTitleBarButtonItem * _Nonnull titleBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull doneBarButton;
@property (nonatomic, strong) IQBarButtonItem * _Nonnull fixedSpaceBarButton;
- (nonnull instancetype)initWithFrame:(CGRect)frame SWIFT_UNAVAILABLE;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
@property (nonatomic, strong) UIColor * _Null_unspecified tintColor;
- (void)layoutSubviews;
@property (nonatomic, readonly) BOOL enableInputClicksWhenVisible;
@end

/// Different input type for OTP fields.
typedef SWIFT_ENUM(NSInteger, KeyboardType, open) {
  KeyboardTypeNumeric = 0,
  KeyboardTypeAlphabet = 1,
  KeyboardTypeAlphaNumeric = 2,
};

SWIFT_CLASS("_TtC10CardAppSDK10LDLocalize")
@interface LDLocalize : NSObject
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC10CardAppSDK5Label")
@interface Label : UILabel
- (void)drawTextInRect:(CGRect)rect;
@property (nonatomic, readonly) CGSize intrinsicContentSize;
- (CGSize)sizeThatFits:(CGSize)size SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

SWIFT_CLASS("_TtC10CardAppSDK12OTPFieldView")
@interface OTPFieldView : UIView
- (void)awakeFromNib;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@interface OTPFieldView (SWIFT_EXTENSION(CardAppSDK)) <UITextFieldDelegate>
- (BOOL)textFieldShouldBeginEditing:(UITextField * _Nonnull)textField SWIFT_WARN_UNUSED_RESULT;
- (BOOL)textField:(UITextField * _Nonnull)textField shouldChangeCharactersInRange:(NSRange)range replacementString:(NSString * _Nonnull)string SWIFT_WARN_UNUSED_RESULT;
@end

SWIFT_PROTOCOL("_TtP10CardAppSDK20OTPFieldViewDelegate_")
@protocol OTPFieldViewDelegate
- (BOOL)shouldBecomeFirstResponderForOTPWithOtpTextFieldIndex:(NSInteger)index SWIFT_WARN_UNUSED_RESULT;
- (void)enteredOTPWithOtp:(NSString * _Nonnull)otp;
- (BOOL)hasEnteredAllOTPWithHasEnteredAll:(BOOL)hasEnteredAll SWIFT_WARN_UNUSED_RESULT;
@end

@class SideMenuNavigationController;
@class UIScreenEdgePanGestureRecognizer;
enum PresentDirection : NSInteger;
@class UIPanGestureRecognizer;
SWIFT_CLASS("_TtC10CardAppSDK15SideMenuManager")
@interface SideMenuManager : NSObject
/// Default instance of SideMenuManager.
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong, getter=default) SideMenuManager * _Nonnull default_;)
+ (SideMenuManager * _Nonnull)default SWIFT_WARN_UNUSED_RESULT;
/// Default instance of SideMenuManager (objective-C).
SWIFT_CLASS_PROPERTY(@property (nonatomic, class, readonly, strong) SideMenuManager * _Nonnull defaultManager;)
+ (SideMenuManager * _Nonnull)defaultManager SWIFT_WARN_UNUSED_RESULT;
/// The left menu.
@property (nonatomic, strong) SideMenuNavigationController * _Nullable leftMenuNavigationController;
/// The right menu.
@property (nonatomic, strong) SideMenuNavigationController * _Nullable rightMenuNavigationController;
/// Adds screen edge gestures for both left and right sides to a view to present a menu.
/// \param toView The view to add gestures to.
///
///
/// returns:
/// The array of screen edge gestures added to <code>toView</code>.
- (NSArray<UIScreenEdgePanGestureRecognizer *> * _Nonnull)addScreenEdgePanGesturesToPresentToView:(UIView * _Nonnull)view;
/// Adds screen edge gestures to a view to present a menu.
/// \param toView The view to add gestures to.
///
/// \param forMenu The menu (left or right) you want to add a gesture for.
///
///
/// returns:
/// The screen edge gestures added to <code>toView</code>.
- (UIScreenEdgePanGestureRecognizer * _Nonnull)addScreenEdgePanGesturesToPresentToView:(UIView * _Nonnull)view forMenu:(enum PresentDirection)side;
/// Adds a pan edge gesture to a view to present menus.
/// \param toView The view to add a pan gesture to.
///
///
/// returns:
/// The pan gesture added to <code>toView</code>.
- (UIPanGestureRecognizer * _Nonnull)addPanGestureToPresentToView:(UIView * _Nonnull)view;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

typedef SWIFT_ENUM(NSInteger, PresentDirection, open) {
  PresentDirectionLeft = 1,
  PresentDirectionRight = 0,
};

enum SideMenuPushStyle : NSInteger;
@interface SideMenuManager (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic, strong) SideMenuNavigationController * _Nullable menuLeftNavigationController SWIFT_DEPRECATED_MSG("", "leftMenuNavigationController");
@property (nonatomic, strong) SideMenuNavigationController * _Nullable menuRightNavigationController SWIFT_DEPRECATED_MSG("", "rightMenuNavigationController");
@property (nonatomic) enum SideMenuPushStyle menuPushStyle SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) BOOL menuAllowPushOfSameClassTwice SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) CGFloat menuWidth SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) double menuAnimationPresentDuration SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) double menuAnimationDismissDuration SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) double menuAnimationCompleteGestureDuration SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) CGFloat menuAnimationFadeStrength SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuPresentationStyle class.");
@property (nonatomic) CGFloat menuAnimationTransformScaleFactor SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuPresentationStyle class.");
@property (nonatomic, strong) UIColor * _Nullable menuAnimationBackgroundColor SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuPresentationStyle class.");
@property (nonatomic) float menuShadowOpacity SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuPresentationStyle class.");
@property (nonatomic, strong) UIColor * _Nonnull menuShadowColor SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuPresentationStyle class.");
@property (nonatomic) CGFloat menuShadowRadius SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuPresentationStyle class.");
@property (nonatomic) BOOL menuPresentingViewControllerUserInteractionEnabled SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) NSInteger menuParallaxStrength SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuPresentationStyle class.");
@property (nonatomic) BOOL menuFadeStatusBar SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) UIViewAnimationOptions menuAnimationOptions SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) enum UIViewAnimationCurve menuAnimationCompletionCurve SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) CGFloat menuAnimationUsingSpringWithDamping SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) CGFloat menuAnimationInitialSpringVelocity SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) BOOL menuDismissOnPush SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) BOOL menuAlwaysAnimate SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) BOOL menuDismissWhenBackgrounded SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic, weak) UIPanGestureRecognizer * _Nullable menuLeftSwipeToDismissGesture SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic, weak) UIPanGestureRecognizer * _Nullable menuRightSwipeToDismissGesture SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) BOOL menuEnableSwipeGestures SWIFT_DEPRECATED_MSG("This property has been moved to the SideMenuNavigationController class.");
@property (nonatomic) BOOL enableSwipeGestures SWIFT_DEPRECATED_MSG("", "enableSwipeToDismissGesture");
- (UIPanGestureRecognizer * _Nonnull)menuAddPanGestureToPresentToView:(UIView * _Nonnull)view SWIFT_DEPRECATED_MSG("", "addPanGestureToPresentToView:");
@end

@protocol SideMenuNavigationControllerDelegate;
@protocol UIViewControllerTransitionCoordinator;
@protocol UIViewControllerTransitioningDelegate;
SWIFT_CLASS("_TtC10CardAppSDK28SideMenuNavigationController")
@interface SideMenuNavigationController : UINavigationController
/// Delegate for receiving appear and disappear related events. If <code>nil</code> the visible view controller that displays a <code>SideMenuNavigationController</code> automatically receives these events.
@property (nonatomic, weak) id <SideMenuNavigationControllerDelegate> _Nullable sideMenuDelegate;
/// The swipe to dismiss gesture.
@property (nonatomic, readonly, weak) UIPanGestureRecognizer * _Nullable swipeToDismissGesture;
/// The tap to dismiss gesture.
@property (nonatomic, readonly, weak) UITapGestureRecognizer * _Nullable tapToDismissGesture;
@property (nonatomic, strong) SideMenuManager * _Nonnull sideMenuManager;
- (nonnull instancetype)initWithNibName:(NSString * _Nullable)nibNameOrNil bundle:(NSBundle * _Nullable)nibBundleOrNil OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
- (void)awakeFromNib;
- (void)viewWillAppear:(BOOL)animated;
- (void)viewDidAppear:(BOOL)animated;
- (void)viewWillDisappear:(BOOL)animated;
- (void)viewDidDisappear:(BOOL)animated;
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id <UIViewControllerTransitionCoordinator> _Nonnull)coordinator;
- (void)viewWillLayoutSubviews;
- (void)pushViewController:(UIViewController * _Nonnull)viewController animated:(BOOL)animated;
@property (nonatomic, strong) id <UIViewControllerTransitioningDelegate> _Nullable transitioningDelegate;
- (nonnull instancetype)initWithNavigationBarClass:(Class _Nullable)navigationBarClass toolbarClass:(Class _Nullable)toolbarClass SWIFT_UNAVAILABLE;
- (nonnull instancetype)initWithRootViewController:(UIViewController * _Nonnull)rootViewController SWIFT_UNAVAILABLE;
@end

@interface SideMenuNavigationController (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic) IBInspectable BOOL allowPushOfSameClassTwice;
@property (nonatomic) IBInspectable BOOL alwaysAnimate;
@property (nonatomic) IBInspectable UIViewAnimationOptions animationOptions;
@property (nonatomic) IBInspectable double completeGestureDuration;
@property (nonatomic) IBInspectable enum UIViewAnimationCurve completionCurve;
@property (nonatomic) IBInspectable double dismissDuration;
@property (nonatomic) IBInspectable BOOL dismissOnPresent;
@property (nonatomic) IBInspectable BOOL dismissOnPush;
@property (nonatomic) IBInspectable BOOL dismissOnRotation;
@property (nonatomic) IBInspectable BOOL dismissWhenBackgrounded;
@property (nonatomic) IBInspectable BOOL enableSwipeToDismissGesture;
@property (nonatomic) IBInspectable BOOL enableTapToDismissGesture;
@property (nonatomic) IBInspectable CGFloat initialSpringVelocity;
/// Whether the menu appears on the right or left side of the screen. Right is the default. This property cannot be changed after the menu has loaded.
@property (nonatomic) IBInspectable BOOL leftSide;
/// Indicates if the menu is anywhere in the view hierarchy, even if covered by another view controller.
@property (nonatomic, readonly) BOOL isHidden;
@property (nonatomic) IBInspectable CGFloat menuWidth;
@property (nonatomic) IBInspectable BOOL presentingViewControllerUserInteractionEnabled;
@property (nonatomic) IBInspectable BOOL presentingViewControllerUseSnapshot;
@property (nonatomic) IBInspectable double presentDuration;
@property (nonatomic) IBInspectable enum SideMenuPushStyle pushStyle;
@property (nonatomic) IBInspectable CGFloat statusBarEndAlpha;
@property (nonatomic) IBInspectable CGFloat usingSpringWithDamping;
@end

SWIFT_PROTOCOL("_TtP10CardAppSDK36SideMenuNavigationControllerDelegate_")
@protocol SideMenuNavigationControllerDelegate
@optional
- (void)sideMenuWillAppearWithMenu:(SideMenuNavigationController * _Nonnull)menu animated:(BOOL)animated;
- (void)sideMenuDidAppearWithMenu:(SideMenuNavigationController * _Nonnull)menu animated:(BOOL)animated;
- (void)sideMenuWillDisappearWithMenu:(SideMenuNavigationController * _Nonnull)menu animated:(BOOL)animated;
- (void)sideMenuDidDisappearWithMenu:(SideMenuNavigationController * _Nonnull)menu animated:(BOOL)animated;
@end

typedef SWIFT_ENUM(NSInteger, SideMenuPushStyle, open) {
  SideMenuPushStyleDefault = 0,
  SideMenuPushStylePopWhenPossible = 1,
  SideMenuPushStylePreserve = 2,
  SideMenuPushStylePreserveAndHideBackButton = 3,
  SideMenuPushStyleReplace = 4,
  SideMenuPushStyleSubMenu = 5,
};

SWIFT_CLASS("_TtC10CardAppSDK9TextField")
@interface TextField : UITextField
- (CGRect)leftViewRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)textRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (CGRect)editingRectForBounds:(CGRect)bounds SWIFT_WARN_UNUSED_RESULT;
- (nonnull instancetype)initWithFrame:(CGRect)frame OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)coder OBJC_DESIGNATED_INITIALIZER;
@end

@interface UIBarButtonItem (SWIFT_EXTENSION(CardAppSDK)) <AnchorView>
@property (nonatomic, readonly, strong) UIView * _Nonnull plainView;
@end

@interface UIButton (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end

@interface UIImage (SWIFT_EXTENSION(CardAppSDK))
+ (UIImage * _Nullable)keyboardPreviousiOS9Image SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardNextiOS9Image SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardPreviousiOS10Image SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardNextiOS10Image SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardPreviousImage SWIFT_WARN_UNUSED_RESULT;
+ (UIImage * _Nullable)keyboardNextImage SWIFT_WARN_UNUSED_RESULT;
@end

@interface UILabel (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end

@interface UINavigationItem (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end

@interface UIScrollView (SWIFT_EXTENSION(CardAppSDK))
/// If YES, then scrollview will ignore scrolling (simply not scroll it) for adjusting textfield position. Default is NO.
@property (nonatomic) BOOL shouldIgnoreScrollingAdjustment;
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) BOOL shouldRestoreScrollViewContentOffset;
@end

SWIFT_CLASS("_TtC10CardAppSDK22UITableViewVibrantCell")
@interface UITableViewVibrantCell : UITableViewCell
- (nonnull instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString * _Nullable)reuseIdentifier OBJC_DESIGNATED_INITIALIZER;
- (nullable instancetype)initWithCoder:(NSCoder * _Nonnull)aDecoder OBJC_DESIGNATED_INITIALIZER;
@end

@interface UITextField (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end

@interface UITextView (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic, copy) IBInspectable NSString * _Nullable localizeKey;
@end

@interface UIView (SWIFT_EXTENSION(CardAppSDK)) <AnchorView>
@property (nonatomic, readonly, strong) UIView * _Nonnull plainView;
@end

@interface UIView (SWIFT_EXTENSION(CardAppSDK))
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
@property (nonatomic) CGFloat keyboardDistanceFromTextField;
/// If shouldIgnoreSwitchingByNextPrevious is true then library will ignore this textField/textView while moving to other textField/textView using keyboard toolbar next previous buttons. Default is false
@property (nonatomic) BOOL ignoreSwitchingByNextPrevious;
/// Override resigns Keyboard on touching outside of UITextField/View behaviour for this particular textField.
@property (nonatomic) enum IQEnableMode shouldResignOnTouchOutsideMode;
@end

@interface UIView (SWIFT_EXTENSION(CardAppSDK))
@property (nonatomic) IBInspectable BOOL circleCorner;
@property (nonatomic) IBInspectable CGPathRef _Nullable shadowPath;
@property (nonatomic) IBInspectable BOOL shadowShouldRasterize;
@property (nonatomic) IBInspectable CGFloat shadowRasterizationScale;
@end

@interface UIView (SWIFT_EXTENSION(CardAppSDK))
/// Returns the UIViewController object that manages the receiver.
- (UIViewController * _Nullable)viewContainingController SWIFT_WARN_UNUSED_RESULT;
/// Returns the topMost UIViewController object in hierarchy.
- (UIViewController * _Nullable)topMostController SWIFT_WARN_UNUSED_RESULT;
/// Returns the UIViewController object that is actually the parent of this object. Most of the time it’s the viewController object which actually contains it, but result may be different if it’s viewController is added as childViewController of another viewController.
- (UIViewController * _Nullable)parentContainerViewController SWIFT_WARN_UNUSED_RESULT;
/// Returns the superView of provided class type.
/// @param classType class type of the object which is to be search in above hierarchy and return
/// @param belowView view object in upper hierarchy where method should stop searching and return nil
- (UIView * _Nullable)superviewOfClassType:(SWIFT_METATYPE(UIView) _Nonnull)classType belowView:(UIView * _Nullable)belowView SWIFT_WARN_UNUSED_RESULT;
@end

@interface UIView (SWIFT_EXTENSION(CardAppSDK))
/// IQToolbar references for better customization control.
@property (nonatomic, readonly, strong) IQToolbar * _Nonnull keyboardToolbar;
/// If <code>shouldHideToolbarPlaceholder</code> is YES, then title will not be added to the toolbar. Default to NO.
@property (nonatomic) BOOL shouldHideToolbarPlaceholder;
/// <code>toolbarPlaceholder</code> to override default <code>placeholder</code> text when drawing text on toolbar.
@property (nonatomic, copy) NSString * _Nullable toolbarPlaceholder;
/// <code>drawingToolbarPlaceholder</code> will be actual text used to draw on toolbar. This would either <code>placeholder</code> or <code>toolbarPlaceholder</code>.
@property (nonatomic, readonly, copy) NSString * _Nullable drawingToolbarPlaceholder;
/// <hr/>
/// <h2>MARK: Common</h2>
- (void)addKeyboardToolbarWithTargetWithTarget:(id _Nullable)target titleText:(NSString * _Nullable)titleText rightBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)rightBarButtonConfiguration previousBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)previousBarButtonConfiguration nextBarButtonConfiguration:(IQBarButtonItemConfiguration * _Nullable)nextBarButtonConfiguration;
/// <hr/>
/// <h2>MARK: Right</h2>
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addDoneOnKeyboardWithTarget:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithImage:(UIImage * _Nonnull)image target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightButtonOnKeyboardWithText:(NSString * _Nonnull)text target:(id _Nullable)target action:(SEL _Nonnull)action titleText:(NSString * _Nullable)titleText;
/// <hr/>
/// <h2>MARK: Right/Left</h2>
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addCancelDoneOnKeyboardWithTarget:(id _Nullable)target cancelAction:(SEL _Nonnull)cancelAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonTitle:(NSString * _Nonnull)leftButtonTitle rightButtonTitle:(NSString * _Nonnull)rightButtonTitle leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addRightLeftOnKeyboardWithTarget:(id _Nullable)target leftButtonImage:(UIImage * _Nonnull)leftButtonImage rightButtonImage:(UIImage * _Nonnull)rightButtonImage leftButtonAction:(SEL _Nonnull)leftButtonAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
/// <hr/>
/// <h2>MARK: Previous/Next/Right</h2>
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction shouldShowPlaceholder:(BOOL)shouldShowPlaceholder;
- (void)addPreviousNextDoneOnKeyboardWithTarget:(id _Nullable)target previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction doneAction:(SEL _Nonnull)doneAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonImage:(UIImage * _Nonnull)rightButtonImage previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
- (void)addPreviousNextRightOnKeyboardWithTarget:(id _Nullable)target rightButtonTitle:(NSString * _Nonnull)rightButtonTitle previousAction:(SEL _Nonnull)previousAction nextAction:(SEL _Nonnull)nextAction rightButtonAction:(SEL _Nonnull)rightButtonAction titleText:(NSString * _Nullable)titleText;
@end

@interface UIViewController (SWIFT_EXTENSION(CardAppSDK))
- (UIViewController * _Nullable)parentIQContainerViewController SWIFT_WARN_UNUSED_RESULT;
@end

@class NSLayoutConstraint;
@interface UIViewController (SWIFT_EXTENSION(CardAppSDK))
/// To set customized distance from keyboard for textField/textView. Can’t be less than zero
/// @deprecated    Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview
@property (nonatomic, strong) IBOutlet NSLayoutConstraint * _Nullable IQLayoutGuideConstraint SWIFT_DEPRECATED_MSG("Due to change in core-logic of handling distance between textField and keyboard distance, this layout contraint tweak is no longer needed and things will just work out of the box regardless of constraint pinned with safeArea/layoutGuide/superview.");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
